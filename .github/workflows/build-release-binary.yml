name: "Attach binaries to GitHub release"

on:
  release:
    types: [created]

jobs:
  build_binaries:
    name: Build and attach release binary
    strategy:
      matrix:
        include:
          - bin: taker
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: taker
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: taker
            target: x86_64-apple-darwin
            os: macos-latest
            archive_ext: tar
          - bin: maker
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: maker
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            archive_ext: tar
          - bin: maker
            target: x86_64-apple-darwin
            os: macos-latest
            archive_ext: tar
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.target_commitish }}
          token: ${{ secrets.ITCHY_GITHUB_TOKEN }}

      - name: Fetch all tags (workaround for https://github.com/actions/checkout/issues/290)
        run: git fetch --tags --force

      - uses: ./.github/actions/build-release-binary
        id: build
        with:
          target: ${{ matrix.target }}
          gh_token: ${{ secrets.ITCHY_GITHUB_TOKEN }}
          binary: ${{ matrix.bin }}

      # Remove once python 3 is the default
      - uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - id: create-archive-name
        shell: python # Use python to have a prettier name for the archive.
        run: |
          import platform
          os_info = platform.uname()

          arch = os_info.machine

          triple = "${{ matrix.target }}".split("-")
          arch = triple[0]

          archive_name=f'${{ matrix.bin }}_${{ github.event.release.tag_name }}_{os_info.system}_{arch}.${{ matrix.archive_ext }}'

          print(f'::set-output name=archive::{archive_name}')

      - name: Pack macos archive
        if: matrix.os == 'macos-latest'
        shell: bash
        run: gtar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Pack linux archive
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: tar -C ./target/${{ matrix.target }}/release --create --file=${{ steps.create-archive-name.outputs.archive }} ${{ matrix.bin }}

      - name: Upload archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.ITCHY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.create-archive-name.outputs.archive }}
          asset_name: ${{ steps.create-archive-name.outputs.archive }}
          asset_content_type: application/gzip

  publish_electron_binaries:
    continue-on-error: true
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: macos-latest
            package_arg: --mac --arm64
            arch: arm64
            target: aarch64-apple-darwin
          - os: macos-latest
            package_arg: --mac
            target: x86_64-apple-darwin
            arch: x64
          - os: windows-latest
            package_arg: --win --x64
            target: x86_64-pc-windows-msvc
            arch: x64
    defaults:
      run:
        working-directory: "crates/taker-electron"

    steps:
      - name: Checkout tagged commit
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.ITCHY_GITHUB_TOKEN }}

      - name: Fetch all tags (workaround for https://github.com/actions/checkout/issues/290)
        run: git fetch --tags --force

      - name: Setup rust toolchain
        working-directory: "./"
        run: rustup show
      - uses: Swatinem/rust-cache@v2.1.0

      - name: Install Protoc for Windows
        if: matrix.os == 'windows-latest'
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup rust targets for aarch64-apple-darwin
        if: matrix.target == 'aarch64-apple-darwin'
        run: rustup target add aarch64-apple-darwin

      - name: Install Node and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: yarn
          cache-dependency-path: |
            taker-frontend/yarn.lock
            crates/taker-electron/package-lock.json

      - name: Build taker frontend
        working-directory: taker-frontend
        shell: bash
        run: |
          yarn
          yarn build

      - name: Bump version in package.json to ${{ github.event.release.tag_name }}
        uses: jaywcjlove/github-action-package@main
        with:
          path: crates/taker-electron/release/app/package.json
          data: |
            {
              "version": "${{ github.event.release.tag_name }}"
            }
      - name: Install
        run: |
          yarn install

      - name: Install-app-deps
        run: |
          yarn run build:dll

      - name: Build dll
        run: |
          yarn electron-builder -- install-app-deps --arch=${{matrix.arch}}
          yarn run build:dll

      - name: Build rust files ${{matrix.target}}
        run: |
          yarn run build:rust --release --target=${{matrix.target}}

      - name: Build electron files main
        run: |
          yarn run build:main
      - name: Build electron files rendered
        run: |
          yarn run build:renderer

      - name: Publish releases
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Enforce that electron-builder does not skip publication if the release was created more than two hours ago
          EP_GH_IGNORE_TIME: true
        run: |
          yarn electron-builder -- --publish always ${{matrix.package_arg}}
